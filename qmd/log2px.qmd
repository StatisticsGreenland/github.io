---
always_allow_html: true
format: 
  html:
    self-contained: true
    toc: true
    toc-location: left
    toc-title: "Usecase:"
    toc_summary: true
    toc-depth: 4
    toc_collapsed: true
    toc_float:
      collapsed: true
execute:
  echo: false
output:
  statgl::statgl_report:
    output: "pretty_html"
editor: visual
---

# pxmake

(last update `r format(Sys.time(), '%d. %B %Y')`)

This note will be presented at the annual PX-meeting in Skopje, North Macedonia, (November 7th, 2024)

Title: pxmake - multilingual px files with R, 2024 ([download this script](https://statisticsgreenland.github.io/qmd/log2px.qmd))

# PXWeb-logfiles

Unfortunately 'PXWeb-out-of-the-box' does not offer usage statistics of any kind. Most likely all PXWeb-based services regularly need to deliver management information as PXWeb is vital to the dissemination policy of many statistical offices . Good news is though, by default PXWeb does store information needed in logfiles.

The tricky part is ironically transfering the information to px-files. But as this example will demonstrate, it is not all that difficult, when using pxmake. To serve as learning material this example use R, free to all, to demonstrate how it can be done.

And do not forget: the easiest methods to disseminate information is with PXWeb.

**ALL code below, runs in a project called: 'log'**

```{r packages_in_use, warning=FALSE, message=FALSE,echo=TRUE}
#| code-fold: true
#| code-summary: "click to see/hide list of packages used"

# Standard R-packages
if(!require("tidyverse")) {install.packages("tidyverse")}
library(tidyverse)
if(!require("lubridate")) {install.packages("lubridate")}
library(lubridate)
if(!require("janitor")) {install.packages("janitor")}
library(janitor)
if(!require("dplyr")) {install.packages("dplyr")}
library(dplyr)
if(!require("RCurl")) {install.packages("RCurl")}
library(RCurl)
if(!require("arrow")) {install.packages("arrow")}
library(arrow)
if(!require("xml2")) {install.packages("xml2")}
library(xml2)

# 2 get subjects used in Statbank Greenland
if(!require("httr")) {install.packages("httr")}
library(httr)
if(!require("jsonlite")) {install.packages("jsonlite")}
library(jsonlite)

# Commands used to setup pxmake ------------------------------------------------------------

# install.packages('devtools')
# devtools::install_github('StatisticsGreenland/pxmake')

library(pxmake)
library(statgl)

```

## Log Types

PXWeb has 3 different log-files apart from the normal web-server logs. They are stored on the server in:

\~/PxWeb/logs, as:

1\) api.log\*\
2) pxweb.log\*\
3) stats.log\*

Here we take a look at 3) stats.log, saved as one file pr day. One row is added to the log-file for each table being extrated or manipulated in the StatBank.

Each row has these informations:

```{r, stats_content, echo=TRUE, eval=FALSE}

from http://bank.stat.gl:
  
a)  2024-07-19 06:43:01,028 \[20\] INFO PCAxis.Web.Controls.PxDefaultLogger -
b)  Context=Selection,
c)  UserId=userid,
d)  Language=da,
e)  Database=Greenland,
f)  ActionType=Presentation,
g)  ActionName=tableViewLayout1,
h)  TableId=C:\inetpub\wwwroot\PxWeb\Resources\PX\Databases\Greenland\...UDXISCPROH.px,
i)  NumberOfCells=3,
j)  NumberOfContents=1

In the Greenlandic StatBank sample-files We find: 

Context:    Selection, Presentation
UserId:     is not set
Language:   en, da, kl
Database:   Greenland, GSmicro
ActionType: Presentation, SaveAs, Operation
ActionName: tableViewSorted, tableViewLayout2, tableViewLayout1, sum, subtract, 
            pivotManual, pivotCW, pivotCCW, perPart, informationView, 
            footnoteView, FileTypeRelational, FileTypePX, FileTypeJsonStat, 
            FileTypeJson, FileTypeHtml5Table, FileTypeHtml, 
            FileTypeExcelXDoubleColumn, FileTypeExcelX, 
            FileTypeExcelDoubleColumn, FileTypeExcel, 
            FileTypeCsvWithoutHeadingAndTabulator,
            FileTypeCsvWithHeadingAndTabulator, FileTypeCsvWithHeadingAndSpace,
            FileTypeCsvWithHeadingAndSemiColon, FileTypeCsvWithHeadingAndComma, 
            FileTypeChartPng, FileTypeChartJpeg, divide, deleteVariable, 
            deleteValue, chartViewRadar, chartViewPopulationPyramid, 
            chartViewPoint, chartViewPie, chartViewLine, 
            chartViewColumnStacked100, chartViewColumnStacked, 
            chartViewColumnLine, chartViewColumn, chartViewBarStacked100, 
            chartViewBarStacked, chartViewBar, chartViewAreaStacked100, 
            chartViewAreaStacked, chartViewArea, changeValueOrder, 
            changeTextCodePresentation   
TableId:    UDXISCPROH.px  
NumberOfCells  
NumberOfContents  

```

### Data Preparation

If you do not have R installed on the web-server, different strategies can be followed.

1)  Set permissions on server to allow the log files to be read
2)  Copy all log-files, you want to analyse, to a file-server
3)  Concatinate all same type log-files to one as .txt

\@3. On a windows sever this can be done with the DOS copy command

```{r, concatinate_on_webserver, echo=TRUE, eval=FALSE}

Log on the server, run the cmd prompt and enter the dos copy command:
  
cd c:/inetpub/wwwroot/PxWeb/logs/ copy /y stats*.* stats.txt
  
```

### Save log files as local parquet

Downloading and reading the log file can be time consuming, so the next chunck is optional. Default it has eval=FALSE, but when TRUE, stats.txt is copied from https://bank.stat.gl/logs and split into named columns in a dataframe named 'statlog'.

The 'statlog' dataframe is saved to disk in the parquet format, for minimal footprint. In this sample the parquet file is 5.4 Mb down from 69 Mb in Rds.

As pxmake uses a variable called language, the language variable in the statlog file is renamed as 'Lang' in this step

```{r read_statlog, message=FALSE, warning=FALSE, echo=TRUE, eval=FALSE}

# Convert log_data into a data frame
log_df <- data.frame(log_entry = log_data, stringsAsFactors = FALSE)

# Extract relevant components using regular expressions
statlog <- log_df %>%
  mutate(
    Timestamp = str_extract(log_entry, "^[^\\[]+"), 
    LogLevel = str_extract(log_entry, "(?<=\\[)[^\\]]+"), 
    Context = str_extract(log_entry, "(?<=Context=)[^,]+"), 
    UserId = str_extract(log_entry, "(?<=UserId=)[^,]+"), 
    Lang = str_extract(log_entry, "(?<=Language=)[^,]+"),   # Language is used by pxmake
    Database = str_extract(log_entry, "(?<=Database=)[^,]+"), 
    ActionType = str_extract(log_entry, "(?<=ActionType=)[^,]+"), 
    ActionName = str_extract(log_entry, "(?<=ActionName=)[^,]+"), 
    TableId = sub("\\.[pP][xX]$", "", basename(str_extract(log_entry, "(?<=TableId=)[^,]+"))),
    NumberOfCells = as.integer(str_extract(log_entry, "(?<=NumberOfCells=)[0-9]+")), 
    NumberOfContents = as.integer(str_extract(log_entry, "(?<=NumberOfContents=)[0-9]+"))
   ) %>%
  select(-log_entry) %>% 
  clean_names()



write_rds(statlog,"statlog.Rds")

write_parquet(statlog,"statlog.parquet")


```

## Data for a Table

The log-files holds a lot of information. In table SBXSTAT01, focus is to some few variables:

time,\
subject and\
language

If the local statlog-file does not exsist, a sample file(1500 observations), is read from Statbank Greenland and used in the continuation.

```{r wranke_data, message=FALSE, warning=FALSE, echo=TRUE, results=FALSE}

statlog <- read_parquet("statlog.parquet")

if (exists("statlog")) {
} else {
  statlog <- read_csv("https://bank.stat.gl/logs/statlog_sample.txt",
                      show_col_types=FALSE) %>% as.data.frame()
}

# Read the log file
SBXSTAT_tab01 <- statlog %>% 
  mutate(time = format(as.Date(timestamp), "%YM%m")) %>% 
  filter(database == "Greenland") %>% 
  filter(action_type == "Presentation") %>% 
  filter(action_name == "tableViewLayout1" | action_name == "tableViewLayout2") %>% 
  filter(context == "Selection") %>% 
  mutate(subjectcode=substr(table_id,1,2)) %>% 
  select(time,subjectcode,lang) %>% 
  group_by(time,subjectcode,lang) %>% 
  count(name="value") %>% 
  ungroup()

```

```{r wranke_sample, message=FALSE, warning=FALSE, echo=TRUE}

SBXSTAT_tab01 %>% sample_n(6) %>% statgl_table()

```

## Text for Subjects

StatBank Greenland names px-files with a 2 character prefix for subjects:

AR - ARbejdsmarked (labourmarket) BE - BEfolkning (population) etc...

All subjects/subjectcodes can be obtained via the api

```{r subjects, message=FALSE, warning=FALSE, echo=TRUE}

# Function to fetch data from API and add language column
fetch_data <- function(url, language) {
  response <- GET(url)
  data <- content(response, as = "text")
  json_data <- fromJSON(data, flatten = TRUE) %>% as_tibble()
  json_data <- json_data %>% mutate(language = language)
  return(json_data)
}

# URLs for the APIs
url_en <- "https://bank.stat.gl/api/v1/en/Greenland"
url_da <- "https://bank.stat.gl/api/v1/da/Greenland"
url_kl <- "https://bank.stat.gl/api/v1/kl/Greenland"

# Fetch data from each API
df_en <- fetch_data(url_en, 'en')
df_da <- fetch_data(url_da, 'da')
df_kl <- fetch_data(url_kl, 'kl')

# Combine the dataframes
subjectcode_text <- bind_rows(df_en, df_da, df_kl) %>% 
  select(-type)

subjectcode_text %>% sample_n(5) %>% statgl_table()

```

# Introducing pxmake

Convert the dataframe to a px-object with minimal metadata. Too little for Pxwin to run. Pxedit does, of cause.

A px-object is created with pxmake::px()

```{r simple_pxmake, warning=FALSE, message=FALSE, echo=TRUE}

x_simple <- px(SBXSTAT_tab01)

px_save(x_simple, "tab1_simple.px")

# Read the first 12 lines
first_12_lines <- readLines("tab1_simple.px", n = 12)

# View the lines
first_12_lines


```

## Prepare Metadata

The PX-file will need a lot more metadata, to make sense to users.

```{r metadata, warning=FALSE, message=FALSE, echo=TRUE}

description <-
  tribble(~language, ~value,
          "en", str_glue("Usage statistics 1999-{year(Sys.Date())} <em>[SBESTAT01]</em>"), 
          "da", str_glue("Antal udtræk per emne 2020-{year(Sys.Date())} <em>[SBDSTAT01]</em>"), 
          "kl", str_glue("Tabelimit ataatsimit emne 2020-{year(Sys.Date())} <em>[SBNSTAT01]</em>"), 
  )

content_txt <-
  tribble(~language, ~value,
          "en", str_glue("Usage statistics"), 
          "da", str_glue("Antal udtræk per emne"), 
          "kl", str_glue("Tabelimit ataatsimit emne"), 
  )

subjects <- subjectcode_text %>% 
  mutate(`variable-code`="subjectcode",
         code=id,
         value=text) %>% 
  select(`variable-code`, code, language, value)

prefix_values <- tibble::tribble(
  ~`variable-code`, ~code,  ~language, ~value, ~order,
  "lang",   "en",   "en",    "English", 1,
  "lang",   "da",   "en",    "Danish", 2,
  "lang",   "kl",   "en",    "Greenlandic", 3,
  "lang",   "en",   "da",    "Engelsk", NA,
  "lang",   "da",   "da",    "Dansk", NA,
  "lang",   "kl",   "da",    "Grønlandsk", NA,
  "lang",   "en",   "kl",    "Tuluttut ", NA,
  "lang",   "da",   "kl",    "Qallunaatut", NA,
  "lang",   "kl",   "kl",    "Kalaallisut", NA,
) %>% 
  bind_rows(subjects)

variable_label <- tribble(~`variable-code`, ~language, ~`variable-label`,
                            'subjectcode',         'en',      'Subject',
                            'subjectcode',         'da',      'Emne',
                            'subjectcode',         'kl',      'Qineq',
                            'lang',         'en',      'Language',
                            'lang',         'da',      'Sprog',
                            'lang',         'kl',      'Killiffigassaq',
                            )

```

## Add to a px-object

In this usecase metadata is added by keywords.

```{r pxmake, warning=FALSE, message=FALSE,echo=TRUE}

creation_date <- "20240301 09:00"
last_updated <- "20240711 09:00"
next_update   <- "20250301 09:00"


x <- SBXSTAT_tab01 %>% 
  pxmake::px() %>%
  px_codepage("utf-8") %>%
  px_language("en") %>%
  px_languages(c("en", "da", "kl")) %>%
  px_decimals("0") %>%
  px_showdecimals("0") %>%
  px_matrix("SBXSTAT01") %>%
  px_subject_code("SB") %>%
  px_subject_area(tribble(~language, ~value,
          "en", "Statbank Greenland", 
          "da", "Statistikbank", 
          "kl", "Kisitsisaataasivik")) %>%
  px_contents(content_txt) %>%
  px_stub(c("subjectcode")) %>%
  px_heading(c("time", "lang")) %>%
  px_values(prefix_values %>% select(-order)) %>% 
  px_variable_label(variable_label) %>% 
  px_timeval("time") %>%
  px_description(description) %>%
  px_title(content_txt) %>%
  px_units(tribble(~language, ~value,
                   "en", "number of table extracts", 
                   "da", "antal tabeludtræk", 
                   "kl", "tabeluttræk")) %>%
  px_update_frequency("When needed") %>%
  px_creation_date(creation_date) %>%
  px_last_updated(last_updated) %>%
  px_next_update(next_update) %>%
  px_contact("Lars Pedersen, LARP at STAT.gl") %>%
  px_source(tribble(~language, ~value,
            "en",  "Statistics Greenland",
            "da",  "Grønlands Statistik",
            "kl",  "Kalaallit Nunaanni Naatsorsueqqissaartarfik")) %>% 
  px_add_totals(c("lang","subjectcode")) %>% 
  px_elimination(tribble(~`variable-code`, ~elimination,
                 'subjectcode',    'Total',
                 'lang',    'Total',
                 ))

```

## Read and Write a px-file

px_save() the px-object as .px .... or .xlsx, yes the object can also be saved to Excel, then edited, and converted back to the px-object and finally saved to px with the changes done in Excel

pxmake can read a .px or a .xlsx to a px-object using px()

If the dataframe has more than 1 million rows, that is the limit of excel, data can be stored as either parquet og Rds files.

```{r savenread, warning=FALSE,message=FALSE, echo=TRUE}

px_save(x, "stat_test.px")

px_save(x, "stat_test.xlsx")

# 
# y <- px("stat_test.xlsx")
# 
# z <- px("stat_test.px")

```

To learn more about pxmake read articles on:

<https://statisticsgreenland.github.io/pxmake/>

# For Researchers

... or just before further analysis, the dataframe 'statlog' can be transformed to a px-file for each selected variable. Footnotes in the px-files can be used to present additional information on the data. The px-files will be stored in a folder, along with needed Alias-text files for presentation in Pxweb.

In statlog, the variables log_level and user_id does not hold useable information, so they are excluded.

Timestamp is too detailed, so metadata is aggregated to monthly data, before presentation, by: time = format(as.Date(timestamp), "%YM%m") or\
biannual as:\
time = ifelse(month(as.Date(timestamp)) \<= 6, paste0(year(as.Date(timestamp)), "H1"), paste0(year(as.Date(timestamp)), "H2"))

This presentation is to allow researcher to learn, what to expect, the variables distribution is like. They can have access at the most detailed level.

The px-files holds a frequency count on each variables unique codeset and the knowledge needed to work with data.

```{r researchers, warning=FALSE,message=FALSE, echo=TRUE}

# Biannual
statlogh <- statlog %>%
  mutate(time = ifelse(month(as.Date(timestamp)) <= 6, paste0(year(as.Date(timestamp)), "H1"),
                       paste0(year(as.Date(timestamp)), "H2"))) %>% 
  select(time, context,lang,table_id,action_type,action_name)

# Monthly
statlogm <- statlog %>%  
  mutate(time = format(as.Date(timestamp), "%YM%m")) %>% 
    select(time, context,lang,table_id,action_type,action_name)

y <- px(statlogh)

px_heading(y)

y <- px(statlogh) %>% 
  px_stub("action_type") %>% 
  px_heading("time")


individual_keywords_ml <- 
  tibble::tribble(
       ~variable, ~language,     ~px_description, ~px_matrix,
        "context",      "en",   "context",         "context",
        "context",      "da",   "context",                NA,
        "context",      "kl",   "context",                NA,
        "lang",         "en",   "lang",               "lang",
        "lang",         "da",   "lang",                   NA,
        "lamg",         "kl",   "lang",                   NA,
        "table_id",     "en",   "table_id",       "table_id",
        "table_id",     "da",   "table_id",               NA,
        "table_id",     "kl",   "table_id",               NA,
        "action_type",  "en",   "Action type",     "actiont",
        "action_type",  "da",   "Action type",            NA,
        "action_type",  "kl",   "Action type",            NA,
        "action_name",  "en",   "Action name",     "actionn",
        "action_name",  "da",   "Action name",            NA,
        "action_name",  "kl",   "Action name",            NA,
  )

z <- y %>%
  px_codepage("utf-8") %>%
  px_language("en") %>%
  px_languages(c("en", "da", "kl")) %>%
  px_decimals("0") %>%
  px_showdecimals("0") %>%
  px_subject_code("SB") %>%
  px_subject_area(tribble(~language, ~value,
          "en", "Statbank Greenland", 
          "da", "Statistikbank", 
          "kl", "Kisitsisaataasivik")) %>%
  px_contents(content_txt) %>%
  px_timeval("time") %>%
  px_description(description) %>%
  px_title(content_txt) %>%
  px_units(tribble(~language, ~value,
                   "en", "number of table extracts", 
                   "da", "antal tabeludtræk", 
                   "kl", "tabeluttræk")) %>%
  px_update_frequency("When needed") %>%
  px_creation_date(creation_date) %>%
  px_last_updated(last_updated) %>%
  px_next_update(next_update) %>%
  px_contact("Lars Pedersen, LARP at STAT.gl") %>% 
  px_autopen('YES')



unlink("SB", recursive = TRUE)
dir.create("SB")
px_micro(z, out_dir = "SB", keyword_values = individual_keywords_ml )




```
